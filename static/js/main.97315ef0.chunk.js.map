{"version":3,"sources":["types.tsx","services/nuddle-meet-api.js","services/actions/rooms.tsx","components/VideoCall/media-access.js","components/VideoCall/index.js","components/Message/Message.tsx","pages/Room.tsx","pages/Login.tsx","components/App/App.tsx","components/utils/ErrorBoundery.tsx","services/reducers/rooms.tsx","services/reducers/index.tsx","store.tsx","services/socket-midleware.js","index.tsx","components/Message/Message.module.css","pages/Pages.module.css","components/VideoCall/videoCall.module.css"],"names":["useSelector","selectorHook","useDispatch","dispatchHook","_apiBase","getRoomsRequest","a","getResourceRaw","res","postRoomsRequest","name","postResourceRaw","getRoomByIDRequest","deleteUserRequest","deleteResourceRaw","url","fetch","method","ok","Error","status","json","data","addData","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","GET_ROOMS_FAILED","POST_ROOMS_REQUEST","POST_ROOMS_SUCCESS","POST_ROOMS_FAILED","GET_ROOM_BY_ID_REQUEST","GET_ROOM_BY_ID_SUCCESS","GET_ROOM_BY_ID_FAILED","WS_CONNECTION_START","WS_CONNECTION_SUCCESS","WS_GET_MESSAGE","WS_SEND_MESSAGE","SET_USER_SUCCESS","DELETE_LEAVE_REQUEST","DELETE_LEAVE_SUCCESS","DELETE_LEAVE_FAILED","getRoomsFailedAction","type","payload","getRoomByIDFailedAction","postRoomsFailedAction","deleteLeaveFailedAction","deleteLeave","dispatch","then","success","deleteLeaveSuccessAction","reason","catch","err","getRooms","getRoomsSuccessAction","postCreateRoom","postRoomsSuccessAction","getRoomByID","getRoomByIDSuccessAction","navigator","mediaDevices","getDisplayMedia","Video","props","useState","localStream","remoteStreamUrl","streamUrl","initiator","peer","full","connecting","waiting","micState","camState","state","setState","localVideoRef","useRef","remoteVideoRef","getDisplay","getDisplayStream","stream","oninactive","removeStream","Promise","resolve","reject","getUserMedia","webkitGetUserMedia","mozGetUserMedia","video","audio","current","srcObject","addStream","autoPlay","id","muted","ref","className","s","videoRemoteContainer","videoRemote","controlBar","exitButton","onClick","leaveRoom","toogleMicButton","pressed","getAudioTracks","length","forEach","track","enabled","toogleVideoButton","getVideoTracks","Message","message","own","top","user","date","bottom","text","Room","test","store","rooms","roomByIDSuccess","roomsSuccess","params","useParams","messageBoxRef","messageInputRef","React","useEffect","focus","setTimeout","scrollIntoView","history","useHistory","push","messageText","setMessageText","onSubmit","e","preventDefault","room","wsSendMessageAction","messenger","chatUsers","chatUsersWrapper","map","owner","users","chatMain","chatMainWrapper","streamVIdeo","chatBox","chatBoxWrapper","chatBoxTop","messages","chatBoxBottom","chatMessageInput","placeholder","value","onChange","target","chatMessageSubmitButton","Login","setName","roomSuccess","failed","roomFailed","location","login","card","label","error","cardInput","cardButton","App","path","ErrorBoundry","hasError","this","children","Component","initialState","roomsRequest","roomsFailed","roomRequest","roomByIDRequest","roomByIDFailed","rootReducer","combineReducers","action","newRoomByID","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","socketio","next","io","connect","on","once","wsGetMessageAction","emit","thunk","createStore","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.97315ef0.chunk.js","sourcesContent":["import { TRoomsActions } from './services/actions/rooms';\r\nimport { store } from './store';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { Action, ActionCreator } from 'redux';\r\nimport {\r\n  TypedUseSelectorHook,\r\n  useSelector as selectorHook,\r\n  useDispatch as dispatchHook,\r\n} from 'react-redux';\r\n\r\nexport const useSelector: TypedUseSelectorHook<RootState> = selectorHook; \r\nexport const useDispatch = () => dispatchHook<AppDispatch | AppThunk>(); \r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n \r\n\r\n\r\nexport type TWsGetMessage = {\r\n  total:number,\r\n  totalToday:number\r\n}\r\n\r\nexport type TAppActions = \r\nTRoomsActions;\r\n\r\nexport type AppThunk<TReturn = void> = ActionCreator<\r\n  ThunkAction<TReturn, Action, RootState, TAppActions>\r\n>; \r\nexport type AppDispatch = typeof store.dispatch; \r\n  \r\n export type TRooms = {\r\n    calories: number\r\n  }\r\n\r\nexport  type TLocationItem = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    search: string\r\n    state: null\r\n  }\r\nexport  type TLocation = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    from: TLocationItem\r\n    search: string\r\n    state: { background: TLocationItem } | null\r\n    background: TLocationItem\r\n  }\r\n","// const _apiBase = 'http://localhost:3001/api'\r\nconst _apiBase = 'https://pure-shelf-86630.herokuapp.com/api'\r\n\r\nexport const getRoomsRequest = async () => {\r\n  const res = await getResourceRaw(`/rooms`);\r\n  return res;\r\n};\r\nexport const postRoomsRequest = async (name) => {\r\n  const res = await postResourceRaw(`/rooms?name=${name}`);\r\n  return res;\r\n};\r\nexport const getRoomByIDRequest = async (name) => {\r\n  const res = await getResourceRaw(`/rooms/${name}`);\r\n  return res;\r\n};\r\nexport const deleteUserRequest = async (name) => {\r\n  const res = await deleteResourceRaw(`/rooms/${name}`);\r\n  return res;\r\n};\r\nconst deleteResourceRaw = async (url) => {\r\n  const res = await fetch(`${_apiBase}${url}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch '${url}', received '${res.status}'`)\r\n  }\r\n  return await res.json();\r\n};\r\n\r\n\r\nconst getResourceRaw = async (url) => {\r\n  const res = await fetch(`${_apiBase}${url}`, {\r\n    method: 'GET',\r\n  });\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch '${url}', received '${res.status}'`)\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nconst postResourceRaw = async (url, data={}) => {\r\n  const addData =  {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    redirect: 'follow',\r\n    referrerPolicy: 'no-referrer',\r\n    body: JSON.stringify(data)\r\n  }\r\n  const res = await fetch(\r\n    `${_apiBase}${url}`, \r\n    addData\r\n  )\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch ${url}` +\r\n      `, received ${res.status}`)\r\n  }\r\n  return await res.json();\r\n};","import { \r\n    getRoomsRequest,\r\n    postRoomsRequest, \r\n    getRoomByIDRequest,\r\n    deleteUserRequest\r\n} from '../nuddle-meet-api';\r\nimport { AppThunk, AppDispatch } from '../../types';\r\nexport const GET_ROOMS_REQUEST:'GET_ROOMS_REQUEST' = 'GET_ROOMS_REQUEST';\r\nexport const GET_ROOMS_SUCCESS:'GET_ITEMSROOMS_SUCCESS' = 'GET_ITEMSROOMS_SUCCESS';\r\nexport const GET_ROOMS_FAILED:'GET_ROOMS_FAILED' = 'GET_ROOMS_FAILED';\r\n\r\nexport const POST_ROOMS_REQUEST:'POST_ROOMS_REQUEST' = 'POST_ROOMS_REQUEST';\r\nexport const POST_ROOMS_SUCCESS:'POST_ROOMS_SUCCESS' = 'POST_ROOMS_SUCCESS';\r\nexport const POST_ROOMS_FAILED:'POST_ROOMS_FAILED' = 'POST_ROOMS_FAILED';\r\n\r\nexport const GET_ROOM_BY_ID_REQUEST:'GET_ROOM_BY_ID_REQUEST' = 'GET_ROOM_BY_ID_REQUEST';\r\nexport const GET_ROOM_BY_ID_SUCCESS:'GET_ROOM_BY_ID_SUCCESS' = 'GET_ROOM_BY_ID_SUCCESS';\r\nexport const GET_ROOM_BY_ID_FAILED:'GET_ROOM_BY_ID_FAILED' = 'GET_ROOM_BY_ID_FAILED';\r\n\r\nexport const WS_CONNECTION_START:'WS_CONNECTION_START' = 'WS_CONNECTION_START';\r\nexport const WS_CONNECTION_SUCCESS:'WS_CONNECTION_SUCCESS' = 'WS_CONNECTION_SUCCESS';\r\nexport const WS_CONNECTION_ERROR:'WS_CONNECTION_ERROR' = 'WS_CONNECTION_ERROR';\r\nexport const WS_GET_MESSAGE:'WS_GET_MESSAGE' = 'WS_GET_MESSAGE';\r\nexport const WS_SEND_MESSAGE:'WS_SEND_MESSAGE' = 'WS_SEND_MESSAGE';\r\nexport const WS_CONNECTION_CLOSED:'WS_CONNECTION_CLOSED' = 'WS_CONNECTION_CLOSED';\r\n\r\nexport const SET_USER_SUCCESS:'SET_USER_SUCCESS' = 'SET_USER_SUCCESS';\r\n\r\nexport const DELETE_LEAVE_REQUEST:'DELETE_LEAVE_REQUEST' = 'DELETE_LEAVE_REQUEST';\r\nexport const DELETE_LEAVE_SUCCESS:'DELETE_LEAVE_SUCCESS' = 'DELETE_LEAVE_SUCCESS';\r\nexport const DELETE_LEAVE_FAILED:'DELETE_LEAVE_FAILED' = 'DELETE_LEAVE_FAILED';\r\n\r\n\r\nexport interface IWsInitAction {\r\n  readonly type: typeof WS_CONNECTION_START;\r\n}\r\n\r\nexport interface IWsConnectionSuccessAction {\r\n  readonly type: typeof WS_CONNECTION_SUCCESS;\r\n}\r\n\r\nexport interface IWsConnectionFailedAction {\r\n  readonly type: typeof WS_CONNECTION_ERROR;\r\n  readonly payload: any;\r\n}\r\n\r\nexport interface IWsGetMessageAction {\r\n  readonly type: typeof WS_GET_MESSAGE;\r\n  readonly payload: any;\r\n}\r\n\r\nexport interface IWsSendMessageAction {\r\n  readonly type: typeof WS_SEND_MESSAGE;\r\n  readonly payload: any;\r\n}\r\n\r\nexport interface IWsConnectionClosedAction {\r\n  readonly type: typeof WS_CONNECTION_CLOSED;\r\n}\r\n\r\n\r\nexport interface IGetRoomsRequestAction {\r\n  readonly type: typeof GET_ROOMS_REQUEST;\r\n}\r\n\r\nexport interface IGetRoomsFailedAction {\r\n  readonly type: typeof GET_ROOMS_FAILED ;\r\n  readonly payload: any\r\n}\r\n\r\nexport interface IGetRoomsSuccessAction {\r\n  readonly type: typeof GET_ROOMS_SUCCESS;\r\n  readonly payload: any;\r\n}\r\nexport interface IPostRoomsRequestAction {\r\n  readonly type: typeof POST_ROOMS_REQUEST;\r\n}\r\n\r\nexport interface IPostRoomsFailedAction {\r\n  readonly type: typeof POST_ROOMS_FAILED ;\r\n  readonly payload: any\r\n}\r\n\r\nexport interface IPostRoomsSuccessAction {\r\n  readonly type: typeof POST_ROOMS_SUCCESS;\r\n  readonly payload: any;\r\n}\r\nexport interface IGetRoomByIDRequestAction {\r\n  readonly type: typeof GET_ROOM_BY_ID_REQUEST;\r\n}\r\n\r\nexport interface IGetRoomByIDFailedAction {\r\n  readonly type: typeof GET_ROOM_BY_ID_FAILED ;\r\n  readonly payload: any\r\n}\r\n\r\nexport interface IGetRoomByIDSuccessAction {\r\n  readonly type: typeof GET_ROOM_BY_ID_SUCCESS;\r\n  readonly payload: any;\r\n}\r\n\r\nexport interface ISetUserSuccessAction {\r\n  readonly type: typeof SET_USER_SUCCESS;\r\n  readonly payload: any;\r\n}\r\nexport interface IDeleteLeaveRequestAction {\r\n  readonly type: typeof DELETE_LEAVE_REQUEST;\r\n}\r\n\r\nexport interface IDeleteLeaveFailedAction {\r\n  readonly type: typeof DELETE_LEAVE_FAILED ;\r\n  readonly payload: any\r\n}\r\n\r\nexport interface IDeleteLeaveSuccessAction {\r\n  readonly type: typeof DELETE_LEAVE_SUCCESS;\r\n  readonly payload: any;\r\n}\r\n\r\n\r\nexport type TRoomsActions = \r\nIGetRoomsRequestAction |\r\nIGetRoomsFailedAction |\r\nIGetRoomsSuccessAction | \r\nIPostRoomsRequestAction |\r\nIPostRoomsFailedAction |\r\nIPostRoomsSuccessAction|\r\nIGetRoomByIDRequestAction |\r\nIGetRoomByIDFailedAction |\r\nIGetRoomByIDSuccessAction |\r\nIWsInitAction |\r\nIWsConnectionSuccessAction |\r\nIWsConnectionFailedAction |\r\nIWsGetMessageAction |\r\nIWsSendMessageAction |\r\nIWsConnectionClosedAction |\r\nISetUserSuccessAction |\r\nIDeleteLeaveRequestAction |\r\nIDeleteLeaveFailedAction |\r\nIDeleteLeaveSuccessAction ;\r\n\r\nexport const wsInitAction = (): IWsInitAction => ({\r\n  type: WS_CONNECTION_START\r\n});\r\n\r\nexport const wsConnectionSuccessAction = (): IWsConnectionSuccessAction => ({\r\n  type: WS_CONNECTION_SUCCESS\r\n});\r\n\r\nexport const wsConnectionFailedAction = (payload:any): IWsConnectionFailedAction => ({\r\n  type: WS_CONNECTION_ERROR,\r\n  payload: payload\r\n});\r\n\r\nexport const wsGetMessageAction = (payload:any): IWsGetMessageAction => ({\r\n  type: WS_GET_MESSAGE,\r\n  payload: payload\r\n});\r\n\r\nexport const wsSendMessageAction = (payload:any): IWsSendMessageAction => ({\r\n  type: WS_SEND_MESSAGE,\r\n  payload: payload\r\n\r\n});\r\n\r\nexport const wsConnectionClosedAction = (): IWsConnectionClosedAction => ({\r\n  type: WS_CONNECTION_CLOSED\r\n});\r\n\r\nexport const getRoomsAction = (): IGetRoomsRequestAction => ({\r\n  type: GET_ROOMS_REQUEST\r\n});\r\n\r\nexport const getRoomsFailedAction = (res: any): IGetRoomsFailedAction => ({\r\n  type: GET_ROOMS_FAILED,\r\n  payload: res\r\n});\r\n\r\nexport const getRoomsSuccessAction = (res:any): IGetRoomsSuccessAction => ({\r\n  type: GET_ROOMS_SUCCESS,\r\n  payload: res\r\n});\r\nexport const getRoomByIDAction = (): IGetRoomByIDRequestAction => ({\r\n  type: GET_ROOM_BY_ID_REQUEST\r\n});\r\n\r\nexport const getRoomByIDFailedAction = (res: any): IGetRoomByIDFailedAction => ({\r\n  type: GET_ROOM_BY_ID_FAILED,\r\n  payload: res\r\n});\r\n\r\nexport const getRoomByIDSuccessAction = (res:any): IGetRoomByIDSuccessAction => ({\r\n  type: GET_ROOM_BY_ID_SUCCESS,\r\n  payload: res\r\n});\r\n\r\nexport const postRoomsAction = (): IPostRoomsRequestAction => ({\r\n  type: POST_ROOMS_REQUEST\r\n});\r\n\r\nexport const postRoomsFailedAction = (res: any): IPostRoomsFailedAction => ({\r\n  type: POST_ROOMS_FAILED,\r\n  payload: res\r\n});\r\n\r\nexport const postRoomsSuccessAction = (res:any): IPostRoomsSuccessAction => ({\r\n  type: POST_ROOMS_SUCCESS,\r\n  payload: res\r\n});\r\n\r\nexport const setUserSuccessAction = (res:any): ISetUserSuccessAction => ({\r\n  type: SET_USER_SUCCESS,\r\n  payload: res\r\n});\r\n\r\nexport const deleteLeaveAction = (payload: any): IDeleteLeaveRequestAction => ({\r\n  type: DELETE_LEAVE_REQUEST\r\n});\r\n\r\nexport const deleteLeaveFailedAction = (res: any): IDeleteLeaveFailedAction => ({\r\n  type: DELETE_LEAVE_FAILED,\r\n  payload: res\r\n});\r\n\r\nexport const deleteLeaveSuccessAction = (res:any): IDeleteLeaveSuccessAction => ({\r\n  type: DELETE_LEAVE_SUCCESS,\r\n  payload: res\r\n});\r\n\r\n\r\n\r\nexport const deleteLeave: AppThunk = (payload: any) => (dispatch: AppDispatch) => {\r\n  dispatch(deleteLeaveAction(payload));\r\n  deleteUserRequest(payload)\r\n  .then(res => {\r\n    if (res && res.success) {\r\n      dispatch(deleteLeaveSuccessAction(res));\r\n    } else {\r\n      dispatch(deleteLeaveFailedAction(res.reason));\r\n    }\r\n  })\r\n  .catch(err => {\r\n      dispatch(deleteLeaveFailedAction(err));\r\n  })\r\n}\r\nexport const getRooms: AppThunk = () => (dispatch: AppDispatch) => {\r\n  dispatch(getRoomsAction());\r\n  getRoomsRequest()\r\n  .then(res => {\r\n    if (res && res.success) {\r\n      dispatch(getRoomsSuccessAction(res));\r\n    } else {\r\n      dispatch(getRoomsFailedAction(res.reason));\r\n    }\r\n  })\r\n  .catch(err => {\r\n      dispatch(getRoomsFailedAction(err));\r\n  })\r\n}\r\n\r\nexport const postCreateRoom: AppThunk = (name:any) => (dispatch: AppDispatch) => {\r\n  dispatch(postRoomsAction());\r\n  postRoomsRequest(name)\r\n  .then(res => {\r\n    if (res && res.success) {\r\n      dispatch(postRoomsSuccessAction(res));\r\n    } else {\r\n      dispatch(postRoomsFailedAction(res.reason));\r\n    }\r\n  })\r\n  .catch(err => {\r\n      dispatch(postRoomsFailedAction(err));\r\n  })\r\n}\r\n\r\n\r\nexport const getRoomByID: AppThunk = (name: string) => (dispatch: AppDispatch) => {\r\n  dispatch(getRoomByIDAction());\r\n  getRoomByIDRequest(name)\r\n  .then(res => {\r\n    if (res && res.success) {\r\n      dispatch(getRoomByIDSuccessAction(res));\r\n    } else {\r\n      dispatch(getRoomByIDFailedAction('Some error'));\r\n    }\r\n  })\r\n  .catch(err => {\r\n      dispatch(getRoomByIDFailedAction(err));\r\n  })\r\n}","export async function getDisplayStream(){\r\n    return navigator.mediaDevices.getDisplayMedia();\r\n}","import { useRef, useState } from 'react';\r\nimport VideoCall from './simple-peer';\r\n// import io from 'socket.io-client';\r\nimport { getDisplayStream } from './media-access';\r\n\r\n// import { useParams, useHistory } from 'react-router';\r\nimport s from './videoCall.module.css'\r\n\r\nconst Video = (props) => {\r\n  const initialState = {\r\n    localStream: {},\r\n    remoteStreamUrl: '',\r\n    streamUrl: '',\r\n    initiator: false,\r\n    peer: {},\r\n    full: false,\r\n    connecting: false,\r\n    waiting: true,\r\n    micState:true,\r\n    camState:true,\r\n  };\r\n  const [state, setState] = useState(initialState)\r\n  // const videoCall = new VideoCall();\r\n  // const params = useParams()\r\n  let localVideoRef = useRef(null)\r\n  let remoteVideoRef = useRef(null)\r\n\r\n  // useEffect(()=>{\r\n  //   const wsUrl =  'ws://localhost:3001/'\r\n  //   const socket = io(wsUrl);\r\n  //   const component = this;\r\n  //   setState({ socket });\r\n  //   const { name } = params;\r\n  //   console.log(name);\r\n  //   getUserMedia().then(() => {\r\n  //     // socket.emit('join', { roomId: name });\r\n  //   });\r\n\r\n  //   socket.on('init', () => {\r\n  //     component.setState({ initiator: true });\r\n  //   });\r\n  //   socket.on('ready', () => {\r\n  //     component.enter(name);\r\n  //   });\r\n  //   socket.on('desc', data => {\r\n  //     if (data.type === 'offer' && component.state.initiator) return;\r\n  //     if (data.type === 'answer' && !component.state.initiator) return;\r\n  //     component.call(data);\r\n  //   });\r\n  //   socket.on('disconnected', () => {\r\n  //     component.setState({ initiator: true });\r\n  //   });\r\n  //   socket.on('full', () => {\r\n  //     component.setState({ full: true });\r\n  //   });\r\n\r\n  // }, [])\r\n\r\n\r\n\r\n  function getUserMedia(cb) {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.getUserMedia = navigator.getUserMedia =\r\n        navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia;\r\n      const op = {\r\n        video: true,\r\n        audio: true\r\n      };\r\n      navigator.getUserMedia(\r\n        op,\r\n        stream => {\r\n          setState({ streamUrl: stream, localStream: stream });\r\n          if (localVideoRef) {\r\n            localVideoRef.current.srcObject = stream;\r\n          }\r\n          resolve();\r\n        },\r\n        () => {}\r\n      );\r\n    });\r\n  }\r\n\r\n  function setAudioLocal(){\r\n    if(state.localStream.getAudioTracks().length>0){\r\n      state.localStream.getAudioTracks().forEach(track => {\r\n        track.enabled=!track.enabled;\r\n      });\r\n    }\r\n    setState({\r\n      micState:!state.micState\r\n    })\r\n  }\r\n\r\n  function setVideoLocal(){\r\n    if(state.localStream.getVideoTracks().length>0){\r\n      state.localStream.getVideoTracks().forEach(track => {\r\n        track.enabled=!track.enabled;\r\n      });\r\n    }\r\n    setState({\r\n      camState:!state.camState\r\n    })\r\n  }\r\n\r\n  function getDisplay() {\r\n    getDisplayStream().then(stream => {\r\n      stream.oninactive = () => {\r\n        state.peer.removeStream(state.localStream);\r\n        getUserMedia().then(() => {\r\n          state.peer.addStream(state.localStream);\r\n        });\r\n      };\r\n      setState({ streamUrl: stream, localStream: stream });\r\n      localVideoRef.current.srcObject = stream;\r\n      state.peer.addStream(stream);\r\n    });\r\n  }\r\n\r\n  // const enter = name => {\r\n  //   setState({ connecting: true });\r\n  //   const peer = videoCall.init(\r\n  //     state.localStream,\r\n  //     state.initiator\r\n  //   );\r\n  //   setState({ peer });\r\n\r\n  //   peer.on('signal', data => {\r\n  //     const signal = {\r\n  //       room: name,\r\n  //       desc: data\r\n  //     };\r\n  //     state.socket.emit('signal', signal);\r\n  //   });\r\n  //   peer.on('stream', stream => {\r\n  //     remoteVideoRef.srcObject = stream;\r\n  //     setState({ connecting: false, waiting: false });\r\n  //   });\r\n  //   peer.on('error', function(err) {\r\n  //     console.log(err);\r\n  //   });\r\n  // };\r\n\r\n  // const call = otherId => {\r\n  //   videoCall.connect(otherId);\r\n  // };\r\n  // const renderFull = () => {\r\n  //   if (state.full) {\r\n  //     return 'The room is full';\r\n  //   }\r\n  // };\r\n  \r\n    return (\r\n      <>\r\n        <video\r\n          autoPlay\r\n          id='localVideo'\r\n          muted\r\n          ref={localVideoRef}\r\n          className={s.video}\r\n        />\r\n\r\n        <div className={`${state.connecting || state.waiting ? 'hide' : ''} ${s.videoRemoteContainer}`}>\r\n\r\n        <video\r\n            autoPlay\r\n            id='remoteVideo'\r\n            ref={remoteVideoRef}\r\n            className={s.videoRemote}\r\n          />\r\n          <video\r\n            autoPlay\r\n            id='remoteVideo'\r\n            ref={remoteVideoRef}\r\n            className={s.videoRemote}\r\n          />\r\n          <video\r\n            autoPlay\r\n            id='remoteVideo'\r\n            ref={remoteVideoRef}\r\n            className={s.videoRemote}\r\n          />\r\n\r\n        </div>\r\n\r\n        <div className={s.controlBar}>\r\n          <button \r\n            className={s.exitButton}\r\n            onClick={props.leaveRoom}>\r\n              Exit\r\n            </button>\r\n          <button className={state.micState ? `${s.toogleMicButton} ${s.pressed}` : s.toogleMicButton}\r\n            onClick={() => {\r\n              setAudioLocal();\r\n            }}>Mic</button>\r\n          <button className={state.camState ? `${s.toogleVideoButton} ${s.pressed}` : s.toogleVideoButton}\r\n            onClick={() => {\r\n              setVideoLocal();\r\n            }}>Video</button>\r\n          <button className={s.toogleVideoButton}\r\n            onClick={() => {\r\n              getDisplay();\r\n            }}>Share</button>\r\n        </div>\r\n        \r\n         <div className='controls'>\r\n          {/* <button\r\n            className='control-btn'\r\n            onClick={() => {\r\n              getDisplay();\r\n            }}\r\n          >\r\n            <div>ShareScreenIcon</div>\r\n          </button>\r\n\r\n\r\n          <button\r\n          className='control-btn'\r\n            onClick={() => {\r\n              setAudioLocal();\r\n            }}\r\n          >\r\n            {\r\n              state.micState?(\r\n                <div>MicOnIcon</div>\r\n              ):(\r\n                <div>MicOffIcon</div>\r\n              )\r\n            }\r\n          </button>\r\n\r\n          <button\r\n          className='control-btn'\r\n            onClick={() => {\r\n              setVideoLocal();\r\n            }}\r\n          >\r\n            {\r\n              state.camState?(\r\n                <div>CamOnIcon</div>\r\n              ):(\r\n                <div>CamOffIcon</div>\r\n              )\r\n            }\r\n          </button> */}\r\n        \r\n        \r\n{/* \r\n\r\n        {state.connecting && (\r\n          <div className='status'>\r\n            <p>Establishing connection...</p>\r\n          </div>\r\n        )}\r\n        {state.waiting && (\r\n          <div className='status'>\r\n            <p>Waiting for someone...</p>\r\n          </div>\r\n        )}\r\n        {renderFull()} */}\r\n      </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Video;","import React from 'react';\nimport s from './Message.module.css';\n\nfunction Message(props: any) {\n  return (\n    <div className={`${s.message} ${props.own ? s.own : ''}`}>\n      <div className={s.top}>\n        <span className={s.name}>{props.message?.user}</span>\n        <span className={s.date}>{props.message?.date}</span>\n      </div>\n      <div className={s.bottom}>\n        <p className={s.text}>{props.message?.text}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from 'react';\r\nimport { useSelector, useDispatch } from '../types';\r\nimport { getRooms, getRoomByID } from '../services/actions/rooms';\r\nimport { useParams, useHistory } from 'react-router';\r\nimport { wsSendMessageAction } from '../services/actions/rooms';\r\nimport { deleteLeave } from '../services/actions/rooms';\r\nimport { useRef } from 'react';\r\nimport VideoCall from '../components/VideoCall';\r\n\r\nimport s from './Pages.module.css'\r\nimport Message from '../components/Message/Message';\r\nimport { setTimeout } from 'timers';\r\n\r\n\r\nfunction Room() {\r\n  const dispatch = useDispatch()\r\n  const test = useSelector(store => store.rooms.roomByIDSuccess)\r\n  const user = useSelector(store => store.rooms.user)\r\n  const rooms = useSelector(store => store.rooms.roomsSuccess)\r\n  const params: any = useParams()\r\n\r\n  const messageBoxRef: any = useRef(null)\r\n  const messageInputRef: any = useRef(null)\r\n\r\n  React.useEffect(()=>{\r\n    dispatch(getRooms())\r\n    dispatch(getRoomByID(params.name))\r\n  }, [dispatch, params.name])\r\n\r\n  React.useEffect(()=>{\r\n    messageInputRef && messageInputRef.current.focus()\r\n    setTimeout(()=>{\r\n      messageBoxRef && messageBoxRef.current.scrollIntoView()\r\n    }, 1)\r\n  })\r\n  \r\n\r\n  const history = useHistory()\r\n\r\n  const leaveRoom = () => {\r\n    dispatch(deleteLeave(params.name))\r\n    history.push(`/`,{name: params.name})\r\n  }\r\n\r\n  const [messageText, setMessageText] = React.useState('')\r\n  \r\n  const onSubmit = (e:any) => {\r\n    e.preventDefault()\r\n    const payload = {room:params.name, user: user, messageText}\r\n    dispatch(wsSendMessageAction(payload))\r\n    setMessageText('')\r\n    \r\n  }\r\n  const onChange = (e:any) => {\r\n    setMessageText(e.target.value)\r\n  }\r\n\r\n  if (!user) {\r\n    leaveRoom()\r\n  }\r\n\r\n  return (\r\n    <div className={s.messenger}>\r\n    \r\n\r\n\r\n    <div className={s.chatUsers}>\r\n      <div className={s.chatUsersWrapper}>\r\n      <p>Rooms</p>\r\n      {/* <input placeholder=\"Search\" className={s.chatUsersSearch}/> */}\r\n        \r\n        {\r\n          rooms && rooms.map((room: any) => (\r\n            <p className={s.user}\r\n              onClick={()=>{history.push(`/${room.owner}`)}}>\r\n                {room.owner}\r\n            </p>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n    \r\n      \r\n    <div className={s.chatUsers}>\r\n      <div className={s.chatUsersWrapper}>\r\n      <p>Users</p>\r\n        {/* <input placeholder=\"Search\" className={s.chatUsersSearch}/> */}\r\n        {\r\n          test.users && test.users.map((user: any) => (\r\n            <p key={user.name} className={s.user}>{user.name}</p>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n\r\n      <div className={s.chatMain}>\r\n        <div className={s.chatMainWrapper}>\r\n          <div className={s.streamVIdeo}>\r\n            \r\n              <VideoCall leaveRoom={leaveRoom}/>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={s.chatBox}>\r\n        <div className={s.chatBoxWrapper}>\r\n          <div className={s.chatBoxTop}>\r\n              {\r\n                test.messages && test.messages.map((message: any) => (\r\n                  <Message message={message} own={(message?.user === user) ? true : false}/>\r\n                  ))\r\n              }\r\n              <div ref={messageBoxRef}></div>\r\n          </div>\r\n          <form className={s.chatBoxBottom}\r\n            onSubmit={(e) => {onSubmit(e)}}>\r\n            <textarea \r\n              ref={messageInputRef}\r\n              className={s.chatMessageInput} \r\n              placeholder=\"Share your thoughts...\" \r\n              value={messageText}\r\n              name={'messageText'}\r\n              onChange={(e)=>{onChange(e)}}/>\r\n            <button \r\n              className={s.chatMessageSubmitButton}>\r\n                Share\r\n              </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from '../types';\r\nimport { postCreateRoom } from '../services/actions/rooms';\r\nimport { useHistory } from 'react-router';\r\nimport s from './Pages.module.css'\r\n\r\nfunction Login() {\r\n  const [name, setName] = React.useState('')\r\n  const history: any = useHistory()\r\n  const room = useSelector(store => store.rooms.roomSuccess)\r\n  const failed = useSelector(store => store.rooms.roomFailed)\r\n\r\n  React.useEffect(()=>{\r\n  if (history.location.state?.name) {\r\n    setName(history.location.state?.name)\r\n  }\r\n  }, [history])\r\n  \r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (e:any) => {\r\n    e.preventDefault()\r\n    dispatch(postCreateRoom(name))\r\n  }\r\n  const onChange = (e:any) => {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  if (room?.owner) {\r\n    \r\n    history.push(`/${name}`,{owner: true})\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className={s.login}>\r\n        <form onSubmit={(e)=>onSubmit(e)} className={s.card}>\r\n          {\r\n            failed ? (\r\n              <span className={`${s.label} ${s.error}`}>{failed}</span>\r\n            ) : (\r\n              <span className={`${s.label}`}>Enter your name</span>\r\n            )\r\n            \r\n          }\r\n          <input \r\n            type='text'\r\n            placeholder='Name'\r\n            value={name}\r\n            name={'name'}\r\n            onChange={(e)=>{onChange(e)}}\r\n            className={s.cardInput}/>\r\n          <button className={s.cardButton}>Create a nudle</button>\r\n        </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport { Room, Login } from '../../pages';\nimport { useDispatch } from '../../types';\nimport { wsInitAction } from '../../services/actions/rooms';\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch()\n  React.useEffect(()=>{\n    dispatch(wsInitAction())\n  }, [dispatch])\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/:name\">\n          <Room />\n        </Route>\n        <Route path=\"/\">\n          <Login />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n  state = {\r\n    hasError: false\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({\r\n      hasError: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.hasError) {\r\n      return <div>Error</div>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import {\r\n    GET_ROOMS_FAILED,\r\n    GET_ROOMS_REQUEST,\r\n    GET_ROOMS_SUCCESS,\r\n    POST_ROOMS_FAILED,\r\n    POST_ROOMS_REQUEST,\r\n    POST_ROOMS_SUCCESS,\r\n    GET_ROOM_BY_ID_FAILED,\r\n    GET_ROOM_BY_ID_REQUEST,\r\n    GET_ROOM_BY_ID_SUCCESS,\r\n    SET_USER_SUCCESS,\r\n    DELETE_LEAVE_FAILED,\r\n    DELETE_LEAVE_REQUEST,\r\n    DELETE_LEAVE_SUCCESS,\r\n  } from '../actions/rooms';\r\n  import { WS_GET_MESSAGE } from '../actions/rooms';\r\n  import {TRoomsActions} from '../actions/rooms'\r\n  type TInitialState = {\r\n    roomsSuccess: any,\r\n    roomsRequest: boolean,\r\n    roomsFailed: any,\r\n    roomSuccess: any,\r\n    roomRequest: boolean,\r\n    roomFailed: any,\r\n    roomByIDSuccess: any,\r\n    roomByIDRequest: boolean,\r\n    roomByIDFailed: any,\r\n    user: any\r\n  }\r\n  \r\n  const initialState: TInitialState = {\r\n    roomsSuccess: [],\r\n    roomsRequest: false,\r\n    roomsFailed: false,\r\n    roomSuccess: {},\r\n    roomRequest: false,\r\n    roomFailed: false,\r\n    roomByIDSuccess: [],\r\n    roomByIDRequest: false,\r\n    roomByIDFailed: false,\r\n    user: null\r\n  };\r\n  \r\n  export const roomsReducer = (state = initialState, action:TRoomsActions): TInitialState => {\r\n    switch (action.type) {\r\n      case GET_ROOMS_REQUEST: {\r\n        return {\r\n          ...state,\r\n          roomsRequest: true\r\n        };\r\n      }\r\n      case GET_ROOMS_SUCCESS: {\r\n        return { \r\n          ...state, \r\n          roomsFailed: false, \r\n          roomsSuccess: action.payload.rooms, \r\n          roomsRequest: false \r\n        };\r\n      }\r\n      case GET_ROOMS_FAILED: {\r\n        return { \r\n          ...state, \r\n          roomsFailed: action.payload, \r\n          roomsRequest: false \r\n        };\r\n      }\r\n      case POST_ROOMS_REQUEST: {\r\n        return {\r\n          ...state,\r\n          roomRequest: true\r\n        };\r\n      }\r\n      case POST_ROOMS_SUCCESS: {\r\n        return { \r\n          ...state, \r\n          roomFailed: false, \r\n          roomSuccess: action.payload.room, \r\n          roomRequest: false,\r\n          user: action.payload.room.owner\r\n        };\r\n      }\r\n      case SET_USER_SUCCESS: {\r\n        return { \r\n          ...state, \r\n          user: action.payload.user\r\n        };\r\n      }\r\n      case POST_ROOMS_FAILED: {\r\n        return { \r\n          ...state, \r\n          roomFailed: action.payload, \r\n          roomRequest: false \r\n        };\r\n      }\r\n      case GET_ROOM_BY_ID_REQUEST: {\r\n        return {\r\n          ...state,\r\n          roomByIDRequest: true\r\n        };\r\n      }\r\n      case GET_ROOM_BY_ID_SUCCESS: {\r\n        return { \r\n          ...state, \r\n          roomByIDFailed: false, \r\n          roomByIDSuccess: action.payload.data, \r\n          roomByIDRequest: false \r\n        };\r\n      }\r\n      case GET_ROOM_BY_ID_FAILED: {\r\n        return { \r\n          ...state, \r\n          roomByIDFailed: action.payload, \r\n          roomByIDRequest: false \r\n        };\r\n      }\r\n      case WS_GET_MESSAGE: {\r\n        let newRoomByID = {...state.roomByIDSuccess}\r\n        \r\n        if (state.roomByIDSuccess.owner === action.payload.owner) {\r\n          newRoomByID.messages = action.payload.messages\r\n          return { \r\n            ...state, \r\n            roomByIDSuccess: newRoomByID, \r\n          };\r\n        }\r\n        return { \r\n          ...state,\r\n        };\r\n      }\r\n      case DELETE_LEAVE_REQUEST: {\r\n        return {\r\n          ...state,\r\n          roomByIDRequest: true\r\n        };\r\n      }\r\n      case DELETE_LEAVE_SUCCESS: {\r\n        return initialState;\r\n      }\r\n      case DELETE_LEAVE_FAILED: {\r\n        return { \r\n          ...state, \r\n          roomByIDFailed: action.payload, \r\n          roomByIDRequest: false \r\n        };\r\n      }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  };","import { combineReducers } from 'redux';\r\nimport { roomsReducer } from './rooms';\r\n\r\nexport const rootReducer = combineReducers({\r\n  rooms: roomsReducer,\r\n});\r\n","import { compose, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './services/reducers';\r\nimport { socketMiddleware } from './services/socket-midleware';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose; \r\n    \r\nconst enhancer = composeEnhancers(applyMiddleware(socketMiddleware(), thunk));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport const store = createStore(rootReducer, enhancer);","import { \r\n    WS_CONNECTION_START,\r\n    WS_CONNECTION_SUCCESS,\r\n    WS_SEND_MESSAGE,\r\n    wsGetMessageAction\r\n} from \"./actions/rooms\"\r\nimport io  from 'socket.io-client'\r\n\r\nexport const socketMiddleware = () => {\r\n    return store => {\r\n        let socketio = null;\r\n\r\n        return next => action => {\r\n            const { dispatch } = store;\r\n            const { type, payload } = action;\r\n            if (type === WS_CONNECTION_START) {\r\n                // const wsUrl =  'ws://localhost:3001/'\r\n                const wsUrl =  'wss://pure-shelf-86630.herokuapp.com/api'\r\n                \r\n                socketio = io.connect(wsUrl);\r\n                \r\n            }\r\n            if (socketio) {\r\n                socketio.on('connection', data => {\r\n                    dispatch({ type: WS_CONNECTION_SUCCESS, payload: data });\r\n                })\r\n                socketio.once('message_new_to_client', data => {\r\n                    dispatch(wsGetMessageAction(data));\r\n                })\r\n                if (type === WS_SEND_MESSAGE) {\r\n                    const message = payload;\r\n                    socketio.emit('message_new', message)\r\n                }\r\n            }\r\n\r\n            next(action);\r\n        };\r\n    };\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nimport ErrorBoundry from './components/utils/ErrorBoundery';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n import { store } from './store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundry>\n        <Provider store={store}>\n          <Router>\n            <App />\n          </Router>\n        </Provider>\n    </ErrorBoundry>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2yI55\",\"own\":\"Message_own__3eHsq\",\"bottom\":\"Message_bottom__3zSHz\",\"text\":\"Message_text__1hSrg\",\"top\":\"Message_top__1kMH_\",\"name\":\"Message_name__3_KhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messenger\":\"Pages_messenger__n_CzL\",\"chatUsers\":\"Pages_chatUsers__3lK-U\",\"chatMain\":\"Pages_chatMain__3mygK\",\"chatBox\":\"Pages_chatBox__1TB5S\",\"chatMainWrapper\":\"Pages_chatMainWrapper__nS8d3\",\"chatBoxWrapper\":\"Pages_chatBoxWrapper__1kd-1\",\"chatBoxTop\":\"Pages_chatBoxTop__1jscp\",\"chatBoxBottom\":\"Pages_chatBoxBottom__2vqPy\",\"chatMessageInput\":\"Pages_chatMessageInput__39qLU\",\"chatMessageSubmitButton\":\"Pages_chatMessageSubmitButton__oJV3v\",\"chatUsersWrapper\":\"Pages_chatUsersWrapper__vVow8\",\"chatUsersSearch\":\"Pages_chatUsersSearch__3YgUf\",\"classBoxMessage\":\"Pages_classBoxMessage__13_0a\",\"user\":\"Pages_user__13ur3\",\"streamVIdeo\":\"Pages_streamVIdeo__2ObdY\",\"login\":\"Pages_login__2D0Bh\",\"card\":\"Pages_card__39GcX\",\"label\":\"Pages_label__3pRYZ\",\"error\":\"Pages_error__1SxUK\",\"cardInput\":\"Pages_cardInput__3UODr\",\"cardButton\":\"Pages_cardButton__1To5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"video\":\"videoCall_video__cDddn\",\"videoRemoteContainer\":\"videoCall_videoRemoteContainer__3qvUf\",\"videoRemote\":\"videoCall_videoRemote__3T1pl\",\"controlBar\":\"videoCall_controlBar__37diF\",\"exitButton\":\"videoCall_exitButton__n2DUl\",\"pressed\":\"videoCall_pressed__14tk-\"};"],"sourceRoot":""}